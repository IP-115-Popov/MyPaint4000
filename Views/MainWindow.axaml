<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:vm="using:MyPaint4000.ViewModels"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
		xmlns:models="clr-namespace:MyPaint4000.Models.MyShapes"
		xmlns:conv="clr-namespace:MyPaint4000.Converters"
        mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
        x:Class="MyPaint4000.Views.MainWindow"
        Icon="/Assets/avalonia-logo.ico"
        Title="MyPaint4000">

    <Design.DataContext>
        <vm:MainWindowViewModel/>
    </Design.DataContext>

	<Design.DataContext>
		<vm:MainWindowViewModel/>
	</Design.DataContext>
	<Window.Styles>
		<Style Selector="Button">
			<Setter Property="VerticalContentAlignment" Value="Center"/>
			<Setter Property="HorizontalContentAlignment" Value="Center"/>
			<Setter Property="HorizontalAlignment" Value="Stretch"/>
			<Setter Property="VerticalAlignment" Value="Stretch"/>
		</Style>
	</Window.Styles>
	<Window.Resources>
		<conv:TextColorToBrushConverter x:Key="textColorToBrushConverter"/>
		<conv:StringToPointConverter x:Key="stringToPointConverter"/>
		<conv:StringToDataPathConverterConverter x:Key="stringToDataPathConverterConverter"/>
		<conv:StringToListOfPointsConverter x:Key="stringToListOfPointsConverter"/>
		<conv:StringToThicknessConverter x:Key="stringToThicknessConverter"/>
	</Window.Resources>

	<Grid RowDefinitions="0.08*,*">
		<Grid Grid.Row="0" ColumnDefinitions="0.3*,0.3*,*">
			<Menu Grid.Column="0">
				<MenuItem Header="Экспортировать" Name="menuExport">

					<MenuItem Header="Экспортировать из .xml" Click="OpenFileXml"/>
					<MenuItem Header="Экспортировать из .json" Click="OpenFileJson"/>
				</MenuItem>
			</Menu>
			<Menu Grid.Column="1">
				<MenuItem Header="Импортировать" Name="menuImport">
					<MenuItem Header="Экспортировать в .png" Click="SaveFilePng"/>
					<MenuItem Header="Импортировать в .xml" Click="SaveFileXml"/>
					<MenuItem Header="Импортировать в .json" Click="SaveFileJson"/>
				</MenuItem>
			</Menu>
		</Grid>
		<Grid ShowGridLines="True"  Grid.Row="1" ColumnDefinitions="0.5*,*,0.4*">
			<Grid Grid.Column="0" ColumnDefinitions="*,*" RowDefinitions="0.1*,*,0.1*">
				<ComboBox SelectedItem="{Binding MyFigure}" Items="{Binding MyFiguresList}" Grid.Column="0" Grid.Row="0" Grid.ColumnSpan="1" Name="comboBoxShape">
					<ComboBox.ItemTemplate>
						<DataTemplate>
							<TextBlock Text="{Binding Header}"/>
						</DataTemplate>
					</ComboBox.ItemTemplate>
				</ComboBox>
				<ContentControl Content="{Binding MyFigure}" Grid.Column="0" Grid.Row="1" Grid.ColumnSpan="2"/>
				<Button Command="{Binding AddMyFigure}" Grid.Column="0" Grid.Row="2" Name="buttonAdd" Content="Добавить"/>
				<Button Command="{Binding MyClear}" Grid.Column="1" Grid.Row="2" Name="buttonClear" Content="Сброс"/>
			</Grid>
			
			<ItemsControl Items="{Binding CanvasFigureList}" Grid.Column="1"
						  HorizontalAlignment="Stretch"
						  VerticalAlignment="Stretch">
				
				<ItemsControl.ItemsPanel>
					<ItemsPanelTemplate>
						<Canvas Name="canvas" Background="White"/>
					</ItemsPanelTemplate>
				</ItemsControl.ItemsPanel>
				<ItemsControl.DataTemplates>
					<DataTemplate DataType="{x:Type models:MyRectangle}">
						<Rectangle Height="{Binding Height}"
								   Width="{Binding Width}"
								   Margin="{Binding Margin, Converter={StaticResource stringToThicknessConverter}}"
								   Fill="{Binding Fill, Converter={StaticResource textColorToBrushConverter}}"
								   Stroke="{Binding Stroke, Converter={StaticResource textColorToBrushConverter}}"
								   StrokeThickness ="{Binding StrokeThickness}">
							<Rectangle.RenderTransform>
								<TransformGroup>
									<TranslateTransform X="{Binding TranslateTransformX}"
														Y="{Binding TranslateTransformY}"/>
									<RotateTransform Angle="{Binding RotateTransformAngleDeg}"
													 CenterX="{Binding RotateTransformCenterX}"
													 CenterY="{Binding RotateTransformCenterY}"/>								
									<ScaleTransform ScaleX="{Binding ScaleTransformX}"
													ScaleY="{Binding ScaleTransformY}"/>
									<SkewTransform AngleX="{Binding SkewTransformAngleX}"
												   AngleY="{Binding SkewTransformAngleY}"/>
								</TransformGroup>
							</Rectangle.RenderTransform>
						</Rectangle>
					</DataTemplate>
					<DataTemplate DataType="{x:Type models:MyEllipse}">
						<Ellipse   Height="{Binding Height}"
								   Width="{Binding Width}"
								   Margin="{Binding Margin, Converter={StaticResource stringToThicknessConverter}}"
								   Fill="{Binding Fill, Converter={StaticResource textColorToBrushConverter}}"
								   Stroke="{Binding Stroke, Converter={StaticResource textColorToBrushConverter}}"
								   StrokeThickness ="{Binding StrokeThickness}">
							<Ellipse.RenderTransform>
								<TransformGroup>
									<TranslateTransform X="{Binding TranslateTransformX}"
														Y="{Binding TranslateTransformY}"/>
									<RotateTransform Angle="{Binding RotateTransformAngleDeg}"
													 CenterX="{Binding RotateTransformCenterX}"
													 CenterY="{Binding RotateTransformCenterY}"/>
									<ScaleTransform ScaleX="{Binding ScaleTransformX}"
													ScaleY="{Binding ScaleTransformY}"/>
									<SkewTransform AngleX="{Binding SkewTransformAngleX}"
												   AngleY="{Binding SkewTransformAngleY}"/>
								</TransformGroup>
							</Ellipse.RenderTransform>
						</Ellipse>
					</DataTemplate>
					<DataTemplate DataType="{x:Type models:MyLine}">
						<Line Stroke="{Binding Stroke, Converter={StaticResource textColorToBrushConverter}}"
							  StrokeThickness ="{Binding StrokeThickness}"
							  StartPoint="{Binding StartPoint, Converter={StaticResource stringToPointConverter}}"
							  EndPoint="{Binding EndPoint, Converter={StaticResource stringToPointConverter}}">
							<Line.RenderTransform>
								<TransformGroup>
									<TranslateTransform X="{Binding TranslateTransformX}"
														Y="{Binding TranslateTransformY}"/>
									<RotateTransform Angle="{Binding RotateTransformAngleDeg}"
													 CenterX="{Binding RotateTransformCenterX}"
													 CenterY="{Binding RotateTransformCenterY}"/>
									<ScaleTransform ScaleX="{Binding ScaleTransformX}"
													ScaleY="{Binding ScaleTransformY}"/>
									<SkewTransform AngleX="{Binding SkewTransformAngleX}"
												   AngleY="{Binding SkewTransformAngleY}"/>
								</TransformGroup>
							</Line.RenderTransform>
						</Line>
					</DataTemplate>
					<DataTemplate DataType="{x:Type models:MyPath}">
						<Path Fill="{Binding Fill, Converter={StaticResource textColorToBrushConverter}}"
							  Stroke="{Binding Stroke, Converter={StaticResource textColorToBrushConverter}}"
						      StrokeThickness ="{Binding StrokeThickness}"
							  Data="{Binding Data, Converter={StaticResource stringToDataPathConverterConverter}}">
							<Path.RenderTransform>
								<TransformGroup>
									<TranslateTransform X="{Binding TranslateTransformX}"
														Y="{Binding TranslateTransformY}"/>
									<RotateTransform Angle="{Binding RotateTransformAngleDeg}"
													 CenterX="{Binding RotateTransformCenterX}"
													 CenterY="{Binding RotateTransformCenterY}"/>
									<ScaleTransform ScaleX="{Binding ScaleTransformX}"
													ScaleY="{Binding ScaleTransformY}"/>
									<SkewTransform AngleX="{Binding SkewTransformAngleX}"
												   AngleY="{Binding SkewTransformAngleY}"/>
								</TransformGroup>
							</Path.RenderTransform>
						</Path>
					</DataTemplate>
					<DataTemplate DataType="{x:Type models:MyPolygon}">
						<Polygon  Fill="{Binding Fill, Converter={StaticResource textColorToBrushConverter}}"
								  Stroke="{Binding Stroke, Converter={StaticResource textColorToBrushConverter}}"
								  StrokeThickness ="{Binding StrokeThickness}"
								  Points="{Binding Points, Converter={StaticResource stringToListOfPointsConverter}}">
							<Polygon.RenderTransform>
								<TransformGroup>
									<TranslateTransform X="{Binding TranslateTransformX}"
														Y="{Binding TranslateTransformY}"/>
									<RotateTransform Angle="{Binding RotateTransformAngleDeg}"
													 CenterX="{Binding RotateTransformCenterX}"
													 CenterY="{Binding RotateTransformCenterY}"/>
									<ScaleTransform ScaleX="{Binding ScaleTransformX}"
													ScaleY="{Binding ScaleTransformY}"/>
									<SkewTransform AngleX="{Binding SkewTransformAngleX}"
												   AngleY="{Binding SkewTransformAngleY}"/>
								</TransformGroup>
							</Polygon.RenderTransform>
						</Polygon>
					</DataTemplate>
					<DataTemplate DataType="{x:Type models:MyPolyline}">
						<Polyline Stroke="{Binding Stroke, Converter={StaticResource textColorToBrushConverter}}"
								  StrokeThickness ="{Binding StrokeThickness}"
								  Points="{Binding Points, Converter={StaticResource stringToListOfPointsConverter}}">
							<Polyline.RenderTransform>
								<TransformGroup>
									<TranslateTransform X="{Binding TranslateTransformX}"
														Y="{Binding TranslateTransformY}"/>
									<RotateTransform Angle="{Binding RotateTransformAngleDeg}"
													 CenterX="{Binding RotateTransformCenterX}"
													 CenterY="{Binding RotateTransformCenterY}"/>
									<ScaleTransform ScaleX="{Binding ScaleTransformX}"
													ScaleY="{Binding ScaleTransformY}"/>
									<SkewTransform AngleX="{Binding SkewTransformAngleX}"
												   AngleY="{Binding SkewTransformAngleY}"/>
								</TransformGroup>
							</Polyline.RenderTransform>
						</Polyline>
					</DataTemplate>

				</ItemsControl.DataTemplates>
			</ItemsControl>
			
			<ListBox SelectedItem="{Binding NowTransformShape}" Items="{Binding CanvasFigureList}" Grid.Column="2" Name="listBoxShapes">
				<ListBox.ItemTemplate>
					<DataTemplate>
						<Grid ColumnDefinitions="*,*">
							<TextBlock Grid.Column="0" Text="{Binding Name}"/>
							<Button Grid.Column="1" Content="Del" Command="{Binding $parent[Window].DataContext.DelItem}"
									CommandParameter="{Binding}"/>
						</Grid>
					</DataTemplate>
				</ListBox.ItemTemplate>
			</ListBox>
		</Grid>
	</Grid>

</Window>
